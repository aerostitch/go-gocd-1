// Code generated by "gocd-response-links -type=BuildDetails_ResponseLinks -output=responselinks_builddetails.go"; DO NOT EDIT.

package gocd

import (
	"encoding/json"
	"net/url"
)

func (l BuildDetails_ResponseLinks) MarshalJSON() ([]byte, error) {
	type h struct {
		h string `json:"href"`
	}
	ls := struct {
		Doc    *h `json:"doc,omitempty"`
		Find   *h `json:"find,omitempty"`
		Job    *h `json:"job,omitempty"`
		Latest *h `json:"latest,omitempty"`
		Next   *h `json:"next,omitempty"`
		Oldest *h `json:"oldest,omitempty"`
		Self   *h `json:"self,omitempty"`
	}{}
	if l.Doc != nil {
		ls.Doc = &h{h: l.Doc.String()}
	}
	if l.Find != nil {
		ls.Find = &h{h: l.Find.String()}
	}
	if l.Job != nil {
		ls.Job = &h{h: l.Job.String()}
	}
	if l.Latest != nil {
		ls.Latest = &h{h: l.Latest.String()}
	}
	if l.Next != nil {
		ls.Next = &h{h: l.Next.String()}
	}
	if l.Oldest != nil {
		ls.Oldest = &h{h: l.Oldest.String()}
	}
	if l.Self != nil {
		ls.Self = &h{h: l.Self.String()}
	}
	j, e := json.Marshal(ls)
	if e != nil {
		return nil, e
	}
	return j, nil
}

func (l *BuildDetails_ResponseLinks) UnmarshalJSON(j []byte) error {
	var d map[string]map[string]string
	e := json.Unmarshal(j, &d)
	if e != nil {
		return e
	}

	if d["doc"]["href"] != "" {
		l.Doc, e = url.Parse(d["doc"]["href"])
		if e != nil {
			return e
		}
	}
	if d["find"]["href"] != "" {
		l.Find, e = url.Parse(d["find"]["href"])
		if e != nil {
			return e
		}
	}
	if d["job"]["href"] != "" {
		l.Job, e = url.Parse(d["job"]["href"])
		if e != nil {
			return e
		}
	}
	if d["latest"]["href"] != "" {
		l.Latest, e = url.Parse(d["latest"]["href"])
		if e != nil {
			return e
		}
	}
	if d["next"]["href"] != "" {
		l.Next, e = url.Parse(d["next"]["href"])
		if e != nil {
			return e
		}
	}
	if d["oldest"]["href"] != "" {
		l.Oldest, e = url.Parse(d["oldest"]["href"])
		if e != nil {
			return e
		}
	}
	if d["self"]["href"] != "" {
		l.Self, e = url.Parse(d["self"]["href"])
		if e != nil {
			return e
		}
	}
	return nil
}
